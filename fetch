#!/usr/bin/env -S bash -e

cd "$(dirname "$0")"

print_usage() {
  echo "Usage:"
  echo "  $0 all"
  echo "  $0 <pkg1> <pkg2> ..."
}

fetch_tar() {
  local url="$1"
  local name="$2"
  rm -rf src/"${name}"
  curl -sL "${url}" | tar -xvC src -s ";^[^/]*;${name};"
}

fetch_brotli() {
  local url="https://github.com/google/brotli.git"
  rm -rf src/brotli
  git -C src clone --depth 1 "${url}"
}

fetch_dav1d() {
  local url="https://code.videolan.org/videolan/dav1d.git"
  rm -rf src/dav1d
  git -C src clone --depth 1 "${url}"
}

fetch_ffmpeg() {
  local url="https://github.com/FFmpeg/FFmpeg.git"
  rm -rf src/ffmpeg
  git -C src clone --depth 1 "${url}" ffmpeg
}

fetch_freetype() {
  local url="https://gitlab.freedesktop.org/freetype/freetype.git"
  rm -rf src/freetype
  git -C src clone --depth 1 "${url}"
}

fetch_fribidi() {
  local url="https://github.com/fribidi/fribidi.git"
  rm -rf src/fribidi
  git -C src clone --depth 1 "${url}"
}

fetch_harfbuzz() {
  local url="https://github.com/harfbuzz/harfbuzz.git"
  rm -rf src/harfbuzz
  git -C src clone --depth 1 "${url}"
}

fetch_highway() {
  local url="https://github.com/google/highway.git"
  rm -rf src/highway
  git -C src clone --depth 1 "${url}"
}

fetch_lcms2() {
  local url="https://github.com/mm2/Little-CMS.git"
  rm -rf src/Little-CMS
  git -C src clone --depth 1 "${url}"
}

fetch_libarchive() {
  local url="https://github.com/libarchive/libarchive.git"
  rm -rf src/libarchive
  git -C src clone --depth 1 "${url}"
}

fetch_libass() {
  local url="https://github.com/libass/libass.git"
  rm -rf src/libass
  git -C src clone --depth 1 "${url}"
}

fetch_libbluray() {
  local url="https://code.videolan.org/videolan/libbluray.git"
  rm -rf src/libbluray
  git -C src clone --depth 1 --recurse-submodules "${url}"
}

fetch_libdvdnav() {
  local version="6.1.1"
  local url="https://download.videolan.org/pub/videolan/libdvdnav/${version}/libdvdnav-${version}.tar.bz2"
  fetch_tar "${url}" libdvdnav
}

fetch_libdvdread() {
  local url="https://code.videolan.org/videolan/libdvdread/-/archive/master/libdvdread-master.tar.bz2"
  fetch_tar "${url}" libdvdread
}

fetch_libjxl() {
  local url="https://github.com/libjxl/libjxl.git"
  rm -rf src/libjxl
  git -C src clone --depth 1 "${url}"
}

fetch_libplacebo() {
  local url="https://code.videolan.org/videolan/libplacebo.git"
  rm -rf src/libplacebo
  git -C src clone --depth 1 --recurse-submodules=3rdparty/{fast_float,jinja,markupsafe} "${url}"
}

fetch_libpng() {
  local url="https://github.com/pnggroup/libpng.git"
  rm -rf src/libpng
  git -C src clone --depth 1 "${url}"
}

fetch_libunibreak() {
  local version="6.1"
  local url="https://github.com/adah1972/libunibreak/releases/download/libunibreak_${version//./_}/libunibreak-${version}.tar.gz"
  fetch_tar "${url}" libunibreak
}

fetch_libvpx() {
  local url="https://chromium.googlesource.com/webm/libvpx"
  rm -rf src/libvpx
  git -C src clone --depth 1 "${url}"
}

fetch_libwebp() {
  local url="https://chromium.googlesource.com/webm/libwebp"
  rm -rf src/libwebp
  git -C src clone --depth 1 "${url}"
}

fetch_luajit() {
  local url="https://github.com/LuaJIT/LuaJIT.git"
  rm -rf src/LuaJIT
  git -C src clone --depth 1 "${url}"
}

fetch_moltenvk() {
  local url="https://github.com/KhronosGroup/MoltenVK.git"
  rm -rf src/MoltenVK
  git -C src clone --depth 1 "${url}"
}

fetch_mpv() {
  local url="https://github.com/mpv-player/mpv.git"
  rm -rf src/mpv
  git -C src clone --depth 1 "${url}"
}

fetch_opus() {
  local version="1.5.2"
  local url="https://downloads.xiph.org/releases/opus/opus-${version}.tar.gz"
  fetch_tar "${url}" opus
}

fetch_shaderc() {
  local url="https://github.com/google/shaderc.git"
  rm -rf src/shaderc
  git -C src clone --depth 1 "${url}"
}

fetch_svt-av1() {
  local url="https://gitlab.com/AOMediaCodec/SVT-AV1.git"
  rm -rf src/SVT-AV1
  git -C src clone --depth 1 "${url}"
}

fetch_uchardet() {
  local url="https://gitlab.freedesktop.org/uchardet/uchardet.git"
  rm -rf src/uchardet
  git -C src clone --depth 1 "${url}"
}

fetch_vulkan() {
  local loaderurl="https://github.com/KhronosGroup/Vulkan-Loader.git"
  local headersurl="https://github.com/KhronosGroup/Vulkan-Headers.git"
  rm -rf src/Vulkan-{Loader,Headers}
  git -C src clone --depth 1 "${loaderurl}"
  git -C src clone --depth 1 "${headersurl}"
}

fetch_x264() {
  local url="https://code.videolan.org/videolan/x264.git"
  rm -rf src/x264
  git -C src clone --depth 1 "${url}"
}

fetch_x265() {
  local url="https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2"
  fetch_tar "${url}" x265
}

if [[ $# == 0 ]]; then
  print_usage
  exit 1
fi

if [[ "$*" == "all" ]]; then
  fetch_brotli
  fetch_dav1d
  fetch_ffmpeg
  fetch_freetype
  fetch_fribidi
  fetch_harfbuzz
  fetch_highway
  fetch_lcms2
  fetch_libarchive
  fetch_libass
  fetch_libbluray
  fetch_libdvdnav
  fetch_libdvdread
  fetch_libjxl
  fetch_libplacebo
  fetch_libpng
  fetch_libunibreak
  fetch_libvpx
  fetch_libwebp
  fetch_luajit
  fetch_moltenvk
  fetch_mpv
  fetch_opus
  fetch_shaderc
  fetch_svt-av1
  fetch_uchardet
  fetch_vulkan
  fetch_x264
  fetch_x265
else
  for arg in "$@"; do
    case "${arg}" in
      "brotli")
        fetch_brotli
        ;;
      "dav1d")
        fetch_dav1d
        ;;
      "ffmpeg")
        fetch_ffmpeg
        ;;
      "freetype")
        fetch_freetype
        ;;
      "fribidi")
        fetch_fribidi
        ;;
      "harfbuzz")
        fetch_harfbuzz
        ;;
      "highway")
        fetch_highway
        ;;
      "lcms2")
        fetch_lcms2
        ;;
      "libarchive")
        fetch_libarchive
        ;;
      "libass")
        fetch_libass
        ;;
      "libbluray")
        fetch_libbluray
        ;;
      "libdvdnav")
        fetch_libdvdnav
        ;;
      "libdvdread")
        fetch_libdvdread
        ;;
      "libjxl")
        fetch_libjxl
        ;;
      "libplacebo")
        fetch_libplacebo
        ;;
      "libpng")
        fetch_libpng
        ;;
      "libunibreak")
        fetch_libunibreak
        ;;
      "libvpx")
        fetch_libvpx
        ;;
      "libwebp")
        fetch_libwebp
        ;;
      "luajit")
        fetch_luajit
        ;;
      "moltenvk")
        fetch_moltenvk
        ;;
      "mpv")
        fetch_mpv
        ;;
      "opus")
        fetch_opus
        ;;
      "shaderc")
        fetch_shaderc
        ;;
      "svt-av1")
        fetch_svt-av1
        ;;
      "uchardet")
        fetch_uchardet
        ;;
      "vulkan")
        fetch_vulkan
        ;;
      "x264")
        fetch_x264
        ;;
      "x265")
        fetch_x265
        ;;
      *)
        echo "Unknown argument:"
        echo "  ${arg}"
        print_usage
        exit 1
        ;;
    esac
  done
fi
